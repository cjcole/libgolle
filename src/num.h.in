/*
 * Copyright (C) Anthony Arnold 2014
 */

#ifndef LIBGOLLE_SRC_NUM_H
#define LIBGOLLE_SRC_NUM_H

#include @NUM_DEF@

/*
 * Initialise an integer to 0.
 */
extern void golle_int_new (golle_int_t i);

/*
 * Free the integer's resources.
 */
extern void golle_int_delete (golle_int_t i);

/*
 * Set the value of an integer based on the
 * bytes passed in. Always MSB first. Will import
 * the maximum number of bytes possible, starting at the beginning
 * of the sequence.
 */
extern void golle_int_import (golle_int_t dest, size_t len, char *bytes);

/*
 * Set an integer from a unsigned primitive.
 */
extern void golle_int_set_ui (golle_int_t dest, unsigned long ui);

/*
 * Set an integer from a signed primitive.
 */
extern void golle_int_set_si (golle_int_t dest, signed long si);

/*
 * Set an integer from a hexadecimal string.
 */
extern void golle_int_set_hex (golle_int_t dest, const char *hex);

/*
 * Set an integer from another.
 */
extern void golle_int_set_int (golle_int_t dest, const golle_int_t src);

/*
 * Add two integers together.
 */
extern void golle_int_add (golle_int_t dest, 
			   const golle_int_t lhs, 
			   const golle_int_t rhs);

/*
 * Subtract two integers.
 */
extern void golle_int_sub (golle_int_t dest, 
			   const golle_int_t lhs, 
			   const golle_int_t rhs);


/*
 * Raise an integer to a power, modulo a number.
 */
extern void golle_int_pow (golle_int_t dest, 
			   const golle_int_t base, 
			   const golle_int_t exp,
			   const golle_int_t mod);


/*
 * Multiply two integers.
 */
extern void golle_int_mul (golle_int_t dest, 
			   const golle_int_t lhs, 
			   const golle_int_t rhs);

/*
 * Perform a modulo operation.
 */
extern void golle_int_mod (golle_int_t dest, 
			   const golle_int_t expr, 
			   const golle_int_t mod);

/*
 * Get the inverse of expr modulo mod.
 */
extern void golle_int_invert (golle_int_t dest, 
			      const golle_int_t expr, 
			      const golle_int_t mod);

/*
 * Compare two integers.
 */
extern int golle_int_cmp (const golle_int_t lhs, const golle_int_t rhs);

/*
 * Divide one integer by another, used when two integers
 * are already known to divide each other exactly.
 */
extern void golle_int_divexact (golle_int_t dest, 
				const golle_int_t num,
				const golle_int_t den);


/*
 * Compute the GCD of two integers.
 */
extern void golle_int_gcd (golle_int_t dest,
			   const golle_int_t expr1,
			   const golle_int_t expr2);


/* 
 * Find the next (probable) prime.
 */
extern void golle_int_nextprime (golle_int_t dest, const golle_int_t from);

#endif
